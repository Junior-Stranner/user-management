
spring.application.name=user-management

# Configurações do banco de dados PostgreSQL
spring.datasource.url= jdbc:postgresql://localhost:5432/UserManagement
spring.datasource.username=postgres
spring.datasource.password=123

spring.datasource.driver-class-name=org.postgresql.Driver
#spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect


# Configurações do JPA (Java Persistence API)
spring.jpa.hibernate.ddl-auto=create
spring.jpa.hibernate.show-sql=true
spring.jpa.open-in-view=false
#spring.sql.init.schema-locations=classpath:schema.sql
#spring.sql.init.data-locations=classpath:data.sql

#--Configuração para carregar dados iniciais--
# Define se a inicialização do DataSource deve ser adiada até que todos os outros beans do contexto de aplicação tenham sido completamente inicializados.
# Útil quando há dependências ou configurações que precisam estar prontas antes da inicialização do DataSource.

#spring.jpa.defer-datasource-initialization=true

# Define o modo de inicialização dos scripts SQL.
# 'always' faz com que o Spring execute scripts SQL durante a inicialização da aplicação, independentemente do tipo de DataSource.
# Isso pode ser útil para garantir que os scripts SQL sejam sempre executados, por exemplo, ao carregar dados iniciais ou configurar a estrutura do banco de dados.

#spring.sql.init.mode=always


spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${MAIL_USERNAME}
spring.mail.password=${MAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true

#spring.security.user.password=123
#spring.security.user.name=admin

api.security.token.secret=${JWT_SECRET:my-secret-key}

